// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AudioAdaptor.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class AudioAdaptorHandler : virtual public AudioAdaptorIf {
 public:
  AudioAdaptorHandler() {
    // Your initialization goes here
  }

  int8_t GetPlayoutDeviceNumber() {
    // Your implementation goes here
    printf("GetPlayoutDeviceNumber\n");
  }

  int8_t GetRecordingDeviceNumber() {
    // Your implementation goes here
    printf("GetRecordingDeviceNumber\n");
  }

  void GetPlayoutDeviceName(std::string& _return, const int8_t number) {
    // Your implementation goes here
    printf("GetPlayoutDeviceName\n");
  }

  void GetRecordingDeviceName(std::string& _return, const int8_t number) {
    // Your implementation goes here
    printf("GetRecordingDeviceName\n");
  }

  void SetPlayoutDevice(const std::string& name) {
    // Your implementation goes here
    printf("SetPlayoutDevice\n");
  }

  void SetRecordingDevice(const std::string& name) {
    // Your implementation goes here
    printf("SetRecordingDevice\n");
  }

  int8_t GetSpeechInputLevel() {
    // Your implementation goes here
    printf("GetSpeechInputLevel\n");
  }

  void StartMicTest() {
    // Your implementation goes here
    printf("StartMicTest\n");
  }

  void StopMicTest() {
    // Your implementation goes here
    printf("StopMicTest\n");
  }

  void PlayTone() {
    // Your implementation goes here
    printf("PlayTone\n");
  }

  void MakeCall(const std::string& address) {
    // Your implementation goes here
    printf("MakeCall\n");
  }

  void EndCall() {
    // Your implementation goes here
    printf("EndCall\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AudioAdaptorHandler> handler(new AudioAdaptorHandler());
  shared_ptr<TProcessor> processor(new AudioAdaptorProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

