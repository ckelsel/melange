/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AudioAdaptor_H
#define AudioAdaptor_H

#include <thrift/TDispatchProcessor.h>
#include "vmc_types.h"



class AudioAdaptorIf {
 public:
  virtual ~AudioAdaptorIf() {}
  virtual int8_t GetPlayoutDeviceNumber() = 0;
  virtual int8_t GetRecordingDeviceNumber() = 0;
  virtual void GetPlayoutDeviceName(std::string& _return, const int8_t number) = 0;
  virtual void GetRecordingDeviceName(std::string& _return, const int8_t number) = 0;
  virtual void SetPlayoutDevice(const std::string& name) = 0;
  virtual void SetRecordingDevice(const std::string& name) = 0;
  virtual int8_t GetSpeechInputLevel() = 0;
  virtual void StartMicTest() = 0;
  virtual void StopMicTest() = 0;
  virtual void PlayTone() = 0;
  virtual void MakeCall(const std::string& address) = 0;
  virtual void EndCall() = 0;
};

class AudioAdaptorIfFactory {
 public:
  typedef AudioAdaptorIf Handler;

  virtual ~AudioAdaptorIfFactory() {}

  virtual AudioAdaptorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AudioAdaptorIf* /* handler */) = 0;
};

class AudioAdaptorIfSingletonFactory : virtual public AudioAdaptorIfFactory {
 public:
  AudioAdaptorIfSingletonFactory(const boost::shared_ptr<AudioAdaptorIf>& iface) : iface_(iface) {}
  virtual ~AudioAdaptorIfSingletonFactory() {}

  virtual AudioAdaptorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AudioAdaptorIf* /* handler */) {}

 protected:
  boost::shared_ptr<AudioAdaptorIf> iface_;
};

class AudioAdaptorNull : virtual public AudioAdaptorIf {
 public:
  virtual ~AudioAdaptorNull() {}
  int8_t GetPlayoutDeviceNumber() {
    int8_t _return = 0;
    return _return;
  }
  int8_t GetRecordingDeviceNumber() {
    int8_t _return = 0;
    return _return;
  }
  void GetPlayoutDeviceName(std::string& /* _return */, const int8_t /* number */) {
    return;
  }
  void GetRecordingDeviceName(std::string& /* _return */, const int8_t /* number */) {
    return;
  }
  void SetPlayoutDevice(const std::string& /* name */) {
    return;
  }
  void SetRecordingDevice(const std::string& /* name */) {
    return;
  }
  int8_t GetSpeechInputLevel() {
    int8_t _return = 0;
    return _return;
  }
  void StartMicTest() {
    return;
  }
  void StopMicTest() {
    return;
  }
  void PlayTone() {
    return;
  }
  void MakeCall(const std::string& /* address */) {
    return;
  }
  void EndCall() {
    return;
  }
};


class AudioAdaptor_GetPlayoutDeviceNumber_args {
 public:

  AudioAdaptor_GetPlayoutDeviceNumber_args() {
  }

  virtual ~AudioAdaptor_GetPlayoutDeviceNumber_args() throw() {}


  bool operator == (const AudioAdaptor_GetPlayoutDeviceNumber_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_GetPlayoutDeviceNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_GetPlayoutDeviceNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_GetPlayoutDeviceNumber_pargs {
 public:


  virtual ~AudioAdaptor_GetPlayoutDeviceNumber_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioAdaptor_GetPlayoutDeviceNumber_result__isset {
  _AudioAdaptor_GetPlayoutDeviceNumber_result__isset() : success(false) {}
  bool success;
} _AudioAdaptor_GetPlayoutDeviceNumber_result__isset;

class AudioAdaptor_GetPlayoutDeviceNumber_result {
 public:

  AudioAdaptor_GetPlayoutDeviceNumber_result() : success(0) {
  }

  virtual ~AudioAdaptor_GetPlayoutDeviceNumber_result() throw() {}

  int8_t success;

  _AudioAdaptor_GetPlayoutDeviceNumber_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const AudioAdaptor_GetPlayoutDeviceNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioAdaptor_GetPlayoutDeviceNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_GetPlayoutDeviceNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioAdaptor_GetPlayoutDeviceNumber_presult__isset {
  _AudioAdaptor_GetPlayoutDeviceNumber_presult__isset() : success(false) {}
  bool success;
} _AudioAdaptor_GetPlayoutDeviceNumber_presult__isset;

class AudioAdaptor_GetPlayoutDeviceNumber_presult {
 public:


  virtual ~AudioAdaptor_GetPlayoutDeviceNumber_presult() throw() {}

  int8_t* success;

  _AudioAdaptor_GetPlayoutDeviceNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioAdaptor_GetRecordingDeviceNumber_args {
 public:

  AudioAdaptor_GetRecordingDeviceNumber_args() {
  }

  virtual ~AudioAdaptor_GetRecordingDeviceNumber_args() throw() {}


  bool operator == (const AudioAdaptor_GetRecordingDeviceNumber_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_GetRecordingDeviceNumber_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_GetRecordingDeviceNumber_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_GetRecordingDeviceNumber_pargs {
 public:


  virtual ~AudioAdaptor_GetRecordingDeviceNumber_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioAdaptor_GetRecordingDeviceNumber_result__isset {
  _AudioAdaptor_GetRecordingDeviceNumber_result__isset() : success(false) {}
  bool success;
} _AudioAdaptor_GetRecordingDeviceNumber_result__isset;

class AudioAdaptor_GetRecordingDeviceNumber_result {
 public:

  AudioAdaptor_GetRecordingDeviceNumber_result() : success(0) {
  }

  virtual ~AudioAdaptor_GetRecordingDeviceNumber_result() throw() {}

  int8_t success;

  _AudioAdaptor_GetRecordingDeviceNumber_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const AudioAdaptor_GetRecordingDeviceNumber_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioAdaptor_GetRecordingDeviceNumber_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_GetRecordingDeviceNumber_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioAdaptor_GetRecordingDeviceNumber_presult__isset {
  _AudioAdaptor_GetRecordingDeviceNumber_presult__isset() : success(false) {}
  bool success;
} _AudioAdaptor_GetRecordingDeviceNumber_presult__isset;

class AudioAdaptor_GetRecordingDeviceNumber_presult {
 public:


  virtual ~AudioAdaptor_GetRecordingDeviceNumber_presult() throw() {}

  int8_t* success;

  _AudioAdaptor_GetRecordingDeviceNumber_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AudioAdaptor_GetPlayoutDeviceName_args__isset {
  _AudioAdaptor_GetPlayoutDeviceName_args__isset() : number(false) {}
  bool number;
} _AudioAdaptor_GetPlayoutDeviceName_args__isset;

class AudioAdaptor_GetPlayoutDeviceName_args {
 public:

  AudioAdaptor_GetPlayoutDeviceName_args() : number(0) {
  }

  virtual ~AudioAdaptor_GetPlayoutDeviceName_args() throw() {}

  int8_t number;

  _AudioAdaptor_GetPlayoutDeviceName_args__isset __isset;

  void __set_number(const int8_t val) {
    number = val;
  }

  bool operator == (const AudioAdaptor_GetPlayoutDeviceName_args & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const AudioAdaptor_GetPlayoutDeviceName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_GetPlayoutDeviceName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_GetPlayoutDeviceName_pargs {
 public:


  virtual ~AudioAdaptor_GetPlayoutDeviceName_pargs() throw() {}

  const int8_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioAdaptor_GetPlayoutDeviceName_result__isset {
  _AudioAdaptor_GetPlayoutDeviceName_result__isset() : success(false) {}
  bool success;
} _AudioAdaptor_GetPlayoutDeviceName_result__isset;

class AudioAdaptor_GetPlayoutDeviceName_result {
 public:

  AudioAdaptor_GetPlayoutDeviceName_result() : success() {
  }

  virtual ~AudioAdaptor_GetPlayoutDeviceName_result() throw() {}

  std::string success;

  _AudioAdaptor_GetPlayoutDeviceName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AudioAdaptor_GetPlayoutDeviceName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioAdaptor_GetPlayoutDeviceName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_GetPlayoutDeviceName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioAdaptor_GetPlayoutDeviceName_presult__isset {
  _AudioAdaptor_GetPlayoutDeviceName_presult__isset() : success(false) {}
  bool success;
} _AudioAdaptor_GetPlayoutDeviceName_presult__isset;

class AudioAdaptor_GetPlayoutDeviceName_presult {
 public:


  virtual ~AudioAdaptor_GetPlayoutDeviceName_presult() throw() {}

  std::string* success;

  _AudioAdaptor_GetPlayoutDeviceName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AudioAdaptor_GetRecordingDeviceName_args__isset {
  _AudioAdaptor_GetRecordingDeviceName_args__isset() : number(false) {}
  bool number;
} _AudioAdaptor_GetRecordingDeviceName_args__isset;

class AudioAdaptor_GetRecordingDeviceName_args {
 public:

  AudioAdaptor_GetRecordingDeviceName_args() : number(0) {
  }

  virtual ~AudioAdaptor_GetRecordingDeviceName_args() throw() {}

  int8_t number;

  _AudioAdaptor_GetRecordingDeviceName_args__isset __isset;

  void __set_number(const int8_t val) {
    number = val;
  }

  bool operator == (const AudioAdaptor_GetRecordingDeviceName_args & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const AudioAdaptor_GetRecordingDeviceName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_GetRecordingDeviceName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_GetRecordingDeviceName_pargs {
 public:


  virtual ~AudioAdaptor_GetRecordingDeviceName_pargs() throw() {}

  const int8_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioAdaptor_GetRecordingDeviceName_result__isset {
  _AudioAdaptor_GetRecordingDeviceName_result__isset() : success(false) {}
  bool success;
} _AudioAdaptor_GetRecordingDeviceName_result__isset;

class AudioAdaptor_GetRecordingDeviceName_result {
 public:

  AudioAdaptor_GetRecordingDeviceName_result() : success() {
  }

  virtual ~AudioAdaptor_GetRecordingDeviceName_result() throw() {}

  std::string success;

  _AudioAdaptor_GetRecordingDeviceName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AudioAdaptor_GetRecordingDeviceName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioAdaptor_GetRecordingDeviceName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_GetRecordingDeviceName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioAdaptor_GetRecordingDeviceName_presult__isset {
  _AudioAdaptor_GetRecordingDeviceName_presult__isset() : success(false) {}
  bool success;
} _AudioAdaptor_GetRecordingDeviceName_presult__isset;

class AudioAdaptor_GetRecordingDeviceName_presult {
 public:


  virtual ~AudioAdaptor_GetRecordingDeviceName_presult() throw() {}

  std::string* success;

  _AudioAdaptor_GetRecordingDeviceName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AudioAdaptor_SetPlayoutDevice_args__isset {
  _AudioAdaptor_SetPlayoutDevice_args__isset() : name(false) {}
  bool name;
} _AudioAdaptor_SetPlayoutDevice_args__isset;

class AudioAdaptor_SetPlayoutDevice_args {
 public:

  AudioAdaptor_SetPlayoutDevice_args() : name() {
  }

  virtual ~AudioAdaptor_SetPlayoutDevice_args() throw() {}

  std::string name;

  _AudioAdaptor_SetPlayoutDevice_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const AudioAdaptor_SetPlayoutDevice_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const AudioAdaptor_SetPlayoutDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_SetPlayoutDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_SetPlayoutDevice_pargs {
 public:


  virtual ~AudioAdaptor_SetPlayoutDevice_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_SetPlayoutDevice_result {
 public:

  AudioAdaptor_SetPlayoutDevice_result() {
  }

  virtual ~AudioAdaptor_SetPlayoutDevice_result() throw() {}


  bool operator == (const AudioAdaptor_SetPlayoutDevice_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_SetPlayoutDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_SetPlayoutDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_SetPlayoutDevice_presult {
 public:


  virtual ~AudioAdaptor_SetPlayoutDevice_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AudioAdaptor_SetRecordingDevice_args__isset {
  _AudioAdaptor_SetRecordingDevice_args__isset() : name(false) {}
  bool name;
} _AudioAdaptor_SetRecordingDevice_args__isset;

class AudioAdaptor_SetRecordingDevice_args {
 public:

  AudioAdaptor_SetRecordingDevice_args() : name() {
  }

  virtual ~AudioAdaptor_SetRecordingDevice_args() throw() {}

  std::string name;

  _AudioAdaptor_SetRecordingDevice_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const AudioAdaptor_SetRecordingDevice_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const AudioAdaptor_SetRecordingDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_SetRecordingDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_SetRecordingDevice_pargs {
 public:


  virtual ~AudioAdaptor_SetRecordingDevice_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_SetRecordingDevice_result {
 public:

  AudioAdaptor_SetRecordingDevice_result() {
  }

  virtual ~AudioAdaptor_SetRecordingDevice_result() throw() {}


  bool operator == (const AudioAdaptor_SetRecordingDevice_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_SetRecordingDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_SetRecordingDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_SetRecordingDevice_presult {
 public:


  virtual ~AudioAdaptor_SetRecordingDevice_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioAdaptor_GetSpeechInputLevel_args {
 public:

  AudioAdaptor_GetSpeechInputLevel_args() {
  }

  virtual ~AudioAdaptor_GetSpeechInputLevel_args() throw() {}


  bool operator == (const AudioAdaptor_GetSpeechInputLevel_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_GetSpeechInputLevel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_GetSpeechInputLevel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_GetSpeechInputLevel_pargs {
 public:


  virtual ~AudioAdaptor_GetSpeechInputLevel_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioAdaptor_GetSpeechInputLevel_result__isset {
  _AudioAdaptor_GetSpeechInputLevel_result__isset() : success(false) {}
  bool success;
} _AudioAdaptor_GetSpeechInputLevel_result__isset;

class AudioAdaptor_GetSpeechInputLevel_result {
 public:

  AudioAdaptor_GetSpeechInputLevel_result() : success(0) {
  }

  virtual ~AudioAdaptor_GetSpeechInputLevel_result() throw() {}

  int8_t success;

  _AudioAdaptor_GetSpeechInputLevel_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const AudioAdaptor_GetSpeechInputLevel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioAdaptor_GetSpeechInputLevel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_GetSpeechInputLevel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioAdaptor_GetSpeechInputLevel_presult__isset {
  _AudioAdaptor_GetSpeechInputLevel_presult__isset() : success(false) {}
  bool success;
} _AudioAdaptor_GetSpeechInputLevel_presult__isset;

class AudioAdaptor_GetSpeechInputLevel_presult {
 public:


  virtual ~AudioAdaptor_GetSpeechInputLevel_presult() throw() {}

  int8_t* success;

  _AudioAdaptor_GetSpeechInputLevel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioAdaptor_StartMicTest_args {
 public:

  AudioAdaptor_StartMicTest_args() {
  }

  virtual ~AudioAdaptor_StartMicTest_args() throw() {}


  bool operator == (const AudioAdaptor_StartMicTest_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_StartMicTest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_StartMicTest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_StartMicTest_pargs {
 public:


  virtual ~AudioAdaptor_StartMicTest_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_StartMicTest_result {
 public:

  AudioAdaptor_StartMicTest_result() {
  }

  virtual ~AudioAdaptor_StartMicTest_result() throw() {}


  bool operator == (const AudioAdaptor_StartMicTest_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_StartMicTest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_StartMicTest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_StartMicTest_presult {
 public:


  virtual ~AudioAdaptor_StartMicTest_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioAdaptor_StopMicTest_args {
 public:

  AudioAdaptor_StopMicTest_args() {
  }

  virtual ~AudioAdaptor_StopMicTest_args() throw() {}


  bool operator == (const AudioAdaptor_StopMicTest_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_StopMicTest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_StopMicTest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_StopMicTest_pargs {
 public:


  virtual ~AudioAdaptor_StopMicTest_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_StopMicTest_result {
 public:

  AudioAdaptor_StopMicTest_result() {
  }

  virtual ~AudioAdaptor_StopMicTest_result() throw() {}


  bool operator == (const AudioAdaptor_StopMicTest_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_StopMicTest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_StopMicTest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_StopMicTest_presult {
 public:


  virtual ~AudioAdaptor_StopMicTest_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioAdaptor_PlayTone_args {
 public:

  AudioAdaptor_PlayTone_args() {
  }

  virtual ~AudioAdaptor_PlayTone_args() throw() {}


  bool operator == (const AudioAdaptor_PlayTone_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_PlayTone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_PlayTone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_PlayTone_pargs {
 public:


  virtual ~AudioAdaptor_PlayTone_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_PlayTone_result {
 public:

  AudioAdaptor_PlayTone_result() {
  }

  virtual ~AudioAdaptor_PlayTone_result() throw() {}


  bool operator == (const AudioAdaptor_PlayTone_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_PlayTone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_PlayTone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_PlayTone_presult {
 public:


  virtual ~AudioAdaptor_PlayTone_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AudioAdaptor_MakeCall_args__isset {
  _AudioAdaptor_MakeCall_args__isset() : address(false) {}
  bool address;
} _AudioAdaptor_MakeCall_args__isset;

class AudioAdaptor_MakeCall_args {
 public:

  AudioAdaptor_MakeCall_args() : address() {
  }

  virtual ~AudioAdaptor_MakeCall_args() throw() {}

  std::string address;

  _AudioAdaptor_MakeCall_args__isset __isset;

  void __set_address(const std::string& val) {
    address = val;
  }

  bool operator == (const AudioAdaptor_MakeCall_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const AudioAdaptor_MakeCall_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_MakeCall_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_MakeCall_pargs {
 public:


  virtual ~AudioAdaptor_MakeCall_pargs() throw() {}

  const std::string* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_MakeCall_result {
 public:

  AudioAdaptor_MakeCall_result() {
  }

  virtual ~AudioAdaptor_MakeCall_result() throw() {}


  bool operator == (const AudioAdaptor_MakeCall_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_MakeCall_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_MakeCall_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_MakeCall_presult {
 public:


  virtual ~AudioAdaptor_MakeCall_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioAdaptor_EndCall_args {
 public:

  AudioAdaptor_EndCall_args() {
  }

  virtual ~AudioAdaptor_EndCall_args() throw() {}


  bool operator == (const AudioAdaptor_EndCall_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_EndCall_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_EndCall_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_EndCall_pargs {
 public:


  virtual ~AudioAdaptor_EndCall_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_EndCall_result {
 public:

  AudioAdaptor_EndCall_result() {
  }

  virtual ~AudioAdaptor_EndCall_result() throw() {}


  bool operator == (const AudioAdaptor_EndCall_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioAdaptor_EndCall_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioAdaptor_EndCall_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioAdaptor_EndCall_presult {
 public:


  virtual ~AudioAdaptor_EndCall_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AudioAdaptorClient : virtual public AudioAdaptorIf {
 public:
  AudioAdaptorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AudioAdaptorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int8_t GetPlayoutDeviceNumber();
  void send_GetPlayoutDeviceNumber();
  int8_t recv_GetPlayoutDeviceNumber();
  int8_t GetRecordingDeviceNumber();
  void send_GetRecordingDeviceNumber();
  int8_t recv_GetRecordingDeviceNumber();
  void GetPlayoutDeviceName(std::string& _return, const int8_t number);
  void send_GetPlayoutDeviceName(const int8_t number);
  void recv_GetPlayoutDeviceName(std::string& _return);
  void GetRecordingDeviceName(std::string& _return, const int8_t number);
  void send_GetRecordingDeviceName(const int8_t number);
  void recv_GetRecordingDeviceName(std::string& _return);
  void SetPlayoutDevice(const std::string& name);
  void send_SetPlayoutDevice(const std::string& name);
  void recv_SetPlayoutDevice();
  void SetRecordingDevice(const std::string& name);
  void send_SetRecordingDevice(const std::string& name);
  void recv_SetRecordingDevice();
  int8_t GetSpeechInputLevel();
  void send_GetSpeechInputLevel();
  int8_t recv_GetSpeechInputLevel();
  void StartMicTest();
  void send_StartMicTest();
  void recv_StartMicTest();
  void StopMicTest();
  void send_StopMicTest();
  void recv_StopMicTest();
  void PlayTone();
  void send_PlayTone();
  void recv_PlayTone();
  void MakeCall(const std::string& address);
  void send_MakeCall(const std::string& address);
  void recv_MakeCall();
  void EndCall();
  void send_EndCall();
  void recv_EndCall();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AudioAdaptorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AudioAdaptorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AudioAdaptorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetPlayoutDeviceNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRecordingDeviceNumber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPlayoutDeviceName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRecordingDeviceName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetPlayoutDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetRecordingDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSpeechInputLevel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StartMicTest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StopMicTest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayTone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MakeCall(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_EndCall(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AudioAdaptorProcessor(boost::shared_ptr<AudioAdaptorIf> iface) :
    iface_(iface) {
    processMap_["GetPlayoutDeviceNumber"] = &AudioAdaptorProcessor::process_GetPlayoutDeviceNumber;
    processMap_["GetRecordingDeviceNumber"] = &AudioAdaptorProcessor::process_GetRecordingDeviceNumber;
    processMap_["GetPlayoutDeviceName"] = &AudioAdaptorProcessor::process_GetPlayoutDeviceName;
    processMap_["GetRecordingDeviceName"] = &AudioAdaptorProcessor::process_GetRecordingDeviceName;
    processMap_["SetPlayoutDevice"] = &AudioAdaptorProcessor::process_SetPlayoutDevice;
    processMap_["SetRecordingDevice"] = &AudioAdaptorProcessor::process_SetRecordingDevice;
    processMap_["GetSpeechInputLevel"] = &AudioAdaptorProcessor::process_GetSpeechInputLevel;
    processMap_["StartMicTest"] = &AudioAdaptorProcessor::process_StartMicTest;
    processMap_["StopMicTest"] = &AudioAdaptorProcessor::process_StopMicTest;
    processMap_["PlayTone"] = &AudioAdaptorProcessor::process_PlayTone;
    processMap_["MakeCall"] = &AudioAdaptorProcessor::process_MakeCall;
    processMap_["EndCall"] = &AudioAdaptorProcessor::process_EndCall;
  }

  virtual ~AudioAdaptorProcessor() {}
};

class AudioAdaptorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AudioAdaptorProcessorFactory(const ::boost::shared_ptr< AudioAdaptorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AudioAdaptorIfFactory > handlerFactory_;
};

class AudioAdaptorMultiface : virtual public AudioAdaptorIf {
 public:
  AudioAdaptorMultiface(std::vector<boost::shared_ptr<AudioAdaptorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AudioAdaptorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AudioAdaptorIf> > ifaces_;
  AudioAdaptorMultiface() {}
  void add(boost::shared_ptr<AudioAdaptorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int8_t GetPlayoutDeviceNumber() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPlayoutDeviceNumber();
    }
    return ifaces_[i]->GetPlayoutDeviceNumber();
  }

  int8_t GetRecordingDeviceNumber() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRecordingDeviceNumber();
    }
    return ifaces_[i]->GetRecordingDeviceNumber();
  }

  void GetPlayoutDeviceName(std::string& _return, const int8_t number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPlayoutDeviceName(_return, number);
    }
    ifaces_[i]->GetPlayoutDeviceName(_return, number);
    return;
  }

  void GetRecordingDeviceName(std::string& _return, const int8_t number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRecordingDeviceName(_return, number);
    }
    ifaces_[i]->GetRecordingDeviceName(_return, number);
    return;
  }

  void SetPlayoutDevice(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetPlayoutDevice(name);
    }
    ifaces_[i]->SetPlayoutDevice(name);
  }

  void SetRecordingDevice(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetRecordingDevice(name);
    }
    ifaces_[i]->SetRecordingDevice(name);
  }

  int8_t GetSpeechInputLevel() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSpeechInputLevel();
    }
    return ifaces_[i]->GetSpeechInputLevel();
  }

  void StartMicTest() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StartMicTest();
    }
    ifaces_[i]->StartMicTest();
  }

  void StopMicTest() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StopMicTest();
    }
    ifaces_[i]->StopMicTest();
  }

  void PlayTone() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayTone();
    }
    ifaces_[i]->PlayTone();
  }

  void MakeCall(const std::string& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MakeCall(address);
    }
    ifaces_[i]->MakeCall(address);
  }

  void EndCall() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->EndCall();
    }
    ifaces_[i]->EndCall();
  }

};



#endif
