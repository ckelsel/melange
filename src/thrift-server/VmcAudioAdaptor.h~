#include "AudioAdaptor.h"
#include "WRTCAudioCommon.h"
#include "vmc_types.h"

#include <boost/shared_ptr.hpp>
#include <boost/thread/mutex.hpp>
#include <boost/thread/recursive_mutex.hpp>

using namespace webrtc;
using namespace VMCMedia;

#define VOLUME_SCALING

namespace VMCMedia
{
class CVMCSound;
}

class CVMCAudioAdaptor : boost::noncopyable, public AudioAdaptorIf
{
protected:

	class CVoEObserver : public webrtc::VoiceEngineObserver
	{
	public:
		void CallbackOnError(const int channel, const int errCode);
	};
	
	
public:

	enum 
	{
		MAX_VOLUME_LEVEL = 255,
		MAX_WRTC_VOLUME_LEVEL = 255
	};
	
	CVMCAudioAdaptor();
	
	int8_t GetAudioDeviceLayer();

	void SetAudioDeviceLayer(const int8_t layer);
	
	void AllocateLocalResources(CallInfo& _return, const CallInfo& info);
	
	void StartSession(const CallInfo& info);
	
	void EndSession(const int32_t channel, const bool RetainReservation, const bool isInProgress);
	
	void UpdateSession(const CallInfo& info);
	
	bool IsMuted(const int32_t channel);
	
	void SetMute(const int32_t channel, const bool muted);

	int8_t GetMicrophoneNumberDevice();

	int8_t GetSpeakerNumberDevice();
	
	void GetRecordingDeviceName(std::string& _return, const int8_t number);
	
	void GetPlayoutDeviceName(std::string& _return, const int8_t number);
	
	int8_t GetSpeechInputLevel();
	
	void StartMicrophoneTest();
	
	void StopMicrophoneTest();
	
	void SetPlayoutDevice(const int8_t number);
	
	void SetRecordingDevice(const int8_t number);
	
	void SetRingerDeviceName(const int8_t number);
	
	void SetSpeakerVolume(const int32_t nVolume);
	
	void SetMicVolume(const int32_t nVolume);
	
	void SetRingerVolume(const int32_t nVolume);
	
	void SetAutoGainControl(const bool status, const int8_t type);
	
	void SetEchoCancelation(const bool status, const int8_t type);
	
	void SetNoiseSupression(const bool status, const int8_t type);
	
	int32_t GetSpeakerVolume();
	
	int32_t GetMicVolume();
	
	int32_t GetRingerVolume();
	
	int32_t PlayTone(const std::string& file, const bool continious, const bool ringer);
	
	void StopPlay(const int32_t id);
	
	virtual ~CVMCAudioAdaptor();

private:
	boost::shared_ptr<VMCMedia::CVMCSound> GetSoundLine(const sptrVoiceEngine &spVoiceEngine);
	float GetVolumeScaling(bool bPlayback = true);
	void SetupCodecs (int codecType, int iChannel);
	
	boost::recursive_mutex m_SoundsAccess;
	typedef std::map<unsigned, boost::shared_ptr<VMCMedia::CVMCSound> > mapSounds;
	mapSounds m_SoundLines;
	sptrVoiceEngine m_spVoiceEngine;
	sptrVoEBase m_spVoEBase;
	sptrVoiceEngine m_spRingerEngine;

	sptrVoERTP_RTCP m_spRTP_RTCP;
	sptrVoEVolumeControl m_spVoEVolumeControl;
	sptrVoEHardware m_spVoEHardware;
	sptrVoEAudioProcessing m_spVoEAudioProcessing;
	CVoEObserver VoEObserver;
	
	webrtc::AudioLayers m_eSelectedAudioLayer;
	int m_nDefaultDeviceIndex;
	
	CallInfo m_CurrentCallInfo;
};