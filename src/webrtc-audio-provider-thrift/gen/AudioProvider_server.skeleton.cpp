// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AudioProvider.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class AudioProviderHandler : virtual public AudioProviderIf {
 public:
  AudioProviderHandler() {
    // Your initialization goes here
  }

  void get_playout_devices(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("get_playout_devices\n");
  }

  void get_recording_devices(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("get_recording_devices\n");
  }

  void set_playout_device(const std::string& name) {
    // Your implementation goes here
    printf("set_playout_device\n");
  }

  void set_recording_device(const std::string& name) {
    // Your implementation goes here
    printf("set_recording_device\n");
  }

  int8_t get_speech_input_level() {
    // Your implementation goes here
    printf("get_speech_input_level\n");
  }

  void start_mic_test() {
    // Your implementation goes here
    printf("start_mic_test\n");
  }

  void stop_mic_test() {
    // Your implementation goes here
    printf("stop_mic_test\n");
  }

  void play_tone() {
    // Your implementation goes here
    printf("play_tone\n");
  }

  void make_call(const std::string& address) {
    // Your implementation goes here
    printf("make_call\n");
  }

  void end_call() {
    // Your implementation goes here
    printf("end_call\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AudioProviderHandler> handler(new AudioProviderHandler());
  shared_ptr<TProcessor> processor(new AudioProviderProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

