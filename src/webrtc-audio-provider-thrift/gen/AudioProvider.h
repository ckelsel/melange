/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AudioProvider_H
#define AudioProvider_H

#include <thrift/TDispatchProcessor.h>
#include "audio-provider_types.h"



class AudioProviderIf {
 public:
  virtual ~AudioProviderIf() {}
  virtual void get_playout_devices(std::vector<std::string> & _return) = 0;
  virtual void get_recording_devices(std::vector<std::string> & _return) = 0;
  virtual void set_playout_device(const std::string& name) = 0;
  virtual void set_recording_device(const std::string& name) = 0;
  virtual int8_t get_speech_input_level() = 0;
  virtual void start_mic_test() = 0;
  virtual void stop_mic_test() = 0;
  virtual void play_tone() = 0;
  virtual void make_call(const std::string& address) = 0;
  virtual void end_call() = 0;
};

class AudioProviderIfFactory {
 public:
  typedef AudioProviderIf Handler;

  virtual ~AudioProviderIfFactory() {}

  virtual AudioProviderIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AudioProviderIf* /* handler */) = 0;
};

class AudioProviderIfSingletonFactory : virtual public AudioProviderIfFactory {
 public:
  AudioProviderIfSingletonFactory(const boost::shared_ptr<AudioProviderIf>& iface) : iface_(iface) {}
  virtual ~AudioProviderIfSingletonFactory() {}

  virtual AudioProviderIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AudioProviderIf* /* handler */) {}

 protected:
  boost::shared_ptr<AudioProviderIf> iface_;
};

class AudioProviderNull : virtual public AudioProviderIf {
 public:
  virtual ~AudioProviderNull() {}
  void get_playout_devices(std::vector<std::string> & /* _return */) {
    return;
  }
  void get_recording_devices(std::vector<std::string> & /* _return */) {
    return;
  }
  void set_playout_device(const std::string& /* name */) {
    return;
  }
  void set_recording_device(const std::string& /* name */) {
    return;
  }
  int8_t get_speech_input_level() {
    int8_t _return = 0;
    return _return;
  }
  void start_mic_test() {
    return;
  }
  void stop_mic_test() {
    return;
  }
  void play_tone() {
    return;
  }
  void make_call(const std::string& /* address */) {
    return;
  }
  void end_call() {
    return;
  }
};


class AudioProvider_get_playout_devices_args {
 public:

  AudioProvider_get_playout_devices_args() {
  }

  virtual ~AudioProvider_get_playout_devices_args() throw() {}


  bool operator == (const AudioProvider_get_playout_devices_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_get_playout_devices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_get_playout_devices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_get_playout_devices_pargs {
 public:


  virtual ~AudioProvider_get_playout_devices_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProvider_get_playout_devices_result__isset {
  _AudioProvider_get_playout_devices_result__isset() : success(false) {}
  bool success;
} _AudioProvider_get_playout_devices_result__isset;

class AudioProvider_get_playout_devices_result {
 public:

  AudioProvider_get_playout_devices_result() {
  }

  virtual ~AudioProvider_get_playout_devices_result() throw() {}

  std::vector<std::string>  success;

  _AudioProvider_get_playout_devices_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const AudioProvider_get_playout_devices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioProvider_get_playout_devices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_get_playout_devices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProvider_get_playout_devices_presult__isset {
  _AudioProvider_get_playout_devices_presult__isset() : success(false) {}
  bool success;
} _AudioProvider_get_playout_devices_presult__isset;

class AudioProvider_get_playout_devices_presult {
 public:


  virtual ~AudioProvider_get_playout_devices_presult() throw() {}

  std::vector<std::string> * success;

  _AudioProvider_get_playout_devices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioProvider_get_recording_devices_args {
 public:

  AudioProvider_get_recording_devices_args() {
  }

  virtual ~AudioProvider_get_recording_devices_args() throw() {}


  bool operator == (const AudioProvider_get_recording_devices_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_get_recording_devices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_get_recording_devices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_get_recording_devices_pargs {
 public:


  virtual ~AudioProvider_get_recording_devices_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProvider_get_recording_devices_result__isset {
  _AudioProvider_get_recording_devices_result__isset() : success(false) {}
  bool success;
} _AudioProvider_get_recording_devices_result__isset;

class AudioProvider_get_recording_devices_result {
 public:

  AudioProvider_get_recording_devices_result() {
  }

  virtual ~AudioProvider_get_recording_devices_result() throw() {}

  std::vector<std::string>  success;

  _AudioProvider_get_recording_devices_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const AudioProvider_get_recording_devices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioProvider_get_recording_devices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_get_recording_devices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProvider_get_recording_devices_presult__isset {
  _AudioProvider_get_recording_devices_presult__isset() : success(false) {}
  bool success;
} _AudioProvider_get_recording_devices_presult__isset;

class AudioProvider_get_recording_devices_presult {
 public:


  virtual ~AudioProvider_get_recording_devices_presult() throw() {}

  std::vector<std::string> * success;

  _AudioProvider_get_recording_devices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AudioProvider_set_playout_device_args__isset {
  _AudioProvider_set_playout_device_args__isset() : name(false) {}
  bool name;
} _AudioProvider_set_playout_device_args__isset;

class AudioProvider_set_playout_device_args {
 public:

  AudioProvider_set_playout_device_args() : name() {
  }

  virtual ~AudioProvider_set_playout_device_args() throw() {}

  std::string name;

  _AudioProvider_set_playout_device_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const AudioProvider_set_playout_device_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const AudioProvider_set_playout_device_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_set_playout_device_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_set_playout_device_pargs {
 public:


  virtual ~AudioProvider_set_playout_device_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_set_playout_device_result {
 public:

  AudioProvider_set_playout_device_result() {
  }

  virtual ~AudioProvider_set_playout_device_result() throw() {}


  bool operator == (const AudioProvider_set_playout_device_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_set_playout_device_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_set_playout_device_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_set_playout_device_presult {
 public:


  virtual ~AudioProvider_set_playout_device_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AudioProvider_set_recording_device_args__isset {
  _AudioProvider_set_recording_device_args__isset() : name(false) {}
  bool name;
} _AudioProvider_set_recording_device_args__isset;

class AudioProvider_set_recording_device_args {
 public:

  AudioProvider_set_recording_device_args() : name() {
  }

  virtual ~AudioProvider_set_recording_device_args() throw() {}

  std::string name;

  _AudioProvider_set_recording_device_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const AudioProvider_set_recording_device_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const AudioProvider_set_recording_device_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_set_recording_device_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_set_recording_device_pargs {
 public:


  virtual ~AudioProvider_set_recording_device_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_set_recording_device_result {
 public:

  AudioProvider_set_recording_device_result() {
  }

  virtual ~AudioProvider_set_recording_device_result() throw() {}


  bool operator == (const AudioProvider_set_recording_device_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_set_recording_device_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_set_recording_device_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_set_recording_device_presult {
 public:


  virtual ~AudioProvider_set_recording_device_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioProvider_get_speech_input_level_args {
 public:

  AudioProvider_get_speech_input_level_args() {
  }

  virtual ~AudioProvider_get_speech_input_level_args() throw() {}


  bool operator == (const AudioProvider_get_speech_input_level_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_get_speech_input_level_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_get_speech_input_level_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_get_speech_input_level_pargs {
 public:


  virtual ~AudioProvider_get_speech_input_level_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProvider_get_speech_input_level_result__isset {
  _AudioProvider_get_speech_input_level_result__isset() : success(false) {}
  bool success;
} _AudioProvider_get_speech_input_level_result__isset;

class AudioProvider_get_speech_input_level_result {
 public:

  AudioProvider_get_speech_input_level_result() : success(0) {
  }

  virtual ~AudioProvider_get_speech_input_level_result() throw() {}

  int8_t success;

  _AudioProvider_get_speech_input_level_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const AudioProvider_get_speech_input_level_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioProvider_get_speech_input_level_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_get_speech_input_level_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProvider_get_speech_input_level_presult__isset {
  _AudioProvider_get_speech_input_level_presult__isset() : success(false) {}
  bool success;
} _AudioProvider_get_speech_input_level_presult__isset;

class AudioProvider_get_speech_input_level_presult {
 public:


  virtual ~AudioProvider_get_speech_input_level_presult() throw() {}

  int8_t* success;

  _AudioProvider_get_speech_input_level_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioProvider_start_mic_test_args {
 public:

  AudioProvider_start_mic_test_args() {
  }

  virtual ~AudioProvider_start_mic_test_args() throw() {}


  bool operator == (const AudioProvider_start_mic_test_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_start_mic_test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_start_mic_test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_start_mic_test_pargs {
 public:


  virtual ~AudioProvider_start_mic_test_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_start_mic_test_result {
 public:

  AudioProvider_start_mic_test_result() {
  }

  virtual ~AudioProvider_start_mic_test_result() throw() {}


  bool operator == (const AudioProvider_start_mic_test_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_start_mic_test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_start_mic_test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_start_mic_test_presult {
 public:


  virtual ~AudioProvider_start_mic_test_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioProvider_stop_mic_test_args {
 public:

  AudioProvider_stop_mic_test_args() {
  }

  virtual ~AudioProvider_stop_mic_test_args() throw() {}


  bool operator == (const AudioProvider_stop_mic_test_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_stop_mic_test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_stop_mic_test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_stop_mic_test_pargs {
 public:


  virtual ~AudioProvider_stop_mic_test_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_stop_mic_test_result {
 public:

  AudioProvider_stop_mic_test_result() {
  }

  virtual ~AudioProvider_stop_mic_test_result() throw() {}


  bool operator == (const AudioProvider_stop_mic_test_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_stop_mic_test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_stop_mic_test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_stop_mic_test_presult {
 public:


  virtual ~AudioProvider_stop_mic_test_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioProvider_play_tone_args {
 public:

  AudioProvider_play_tone_args() {
  }

  virtual ~AudioProvider_play_tone_args() throw() {}


  bool operator == (const AudioProvider_play_tone_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_play_tone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_play_tone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_play_tone_pargs {
 public:


  virtual ~AudioProvider_play_tone_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_play_tone_result {
 public:

  AudioProvider_play_tone_result() {
  }

  virtual ~AudioProvider_play_tone_result() throw() {}


  bool operator == (const AudioProvider_play_tone_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_play_tone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_play_tone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_play_tone_presult {
 public:


  virtual ~AudioProvider_play_tone_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AudioProvider_make_call_args__isset {
  _AudioProvider_make_call_args__isset() : address(false) {}
  bool address;
} _AudioProvider_make_call_args__isset;

class AudioProvider_make_call_args {
 public:

  AudioProvider_make_call_args() : address() {
  }

  virtual ~AudioProvider_make_call_args() throw() {}

  std::string address;

  _AudioProvider_make_call_args__isset __isset;

  void __set_address(const std::string& val) {
    address = val;
  }

  bool operator == (const AudioProvider_make_call_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const AudioProvider_make_call_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_make_call_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_make_call_pargs {
 public:


  virtual ~AudioProvider_make_call_pargs() throw() {}

  const std::string* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_make_call_result {
 public:

  AudioProvider_make_call_result() {
  }

  virtual ~AudioProvider_make_call_result() throw() {}


  bool operator == (const AudioProvider_make_call_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_make_call_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_make_call_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_make_call_presult {
 public:


  virtual ~AudioProvider_make_call_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AudioProvider_end_call_args {
 public:

  AudioProvider_end_call_args() {
  }

  virtual ~AudioProvider_end_call_args() throw() {}


  bool operator == (const AudioProvider_end_call_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_end_call_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_end_call_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_end_call_pargs {
 public:


  virtual ~AudioProvider_end_call_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_end_call_result {
 public:

  AudioProvider_end_call_result() {
  }

  virtual ~AudioProvider_end_call_result() throw() {}


  bool operator == (const AudioProvider_end_call_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AudioProvider_end_call_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProvider_end_call_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProvider_end_call_presult {
 public:


  virtual ~AudioProvider_end_call_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AudioProviderClient : virtual public AudioProviderIf {
 public:
  AudioProviderClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AudioProviderClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_playout_devices(std::vector<std::string> & _return);
  void send_get_playout_devices();
  void recv_get_playout_devices(std::vector<std::string> & _return);
  void get_recording_devices(std::vector<std::string> & _return);
  void send_get_recording_devices();
  void recv_get_recording_devices(std::vector<std::string> & _return);
  void set_playout_device(const std::string& name);
  void send_set_playout_device(const std::string& name);
  void recv_set_playout_device();
  void set_recording_device(const std::string& name);
  void send_set_recording_device(const std::string& name);
  void recv_set_recording_device();
  int8_t get_speech_input_level();
  void send_get_speech_input_level();
  int8_t recv_get_speech_input_level();
  void start_mic_test();
  void send_start_mic_test();
  void recv_start_mic_test();
  void stop_mic_test();
  void send_stop_mic_test();
  void recv_stop_mic_test();
  void play_tone();
  void send_play_tone();
  void recv_play_tone();
  void make_call(const std::string& address);
  void send_make_call(const std::string& address);
  void recv_make_call();
  void end_call();
  void send_end_call();
  void recv_end_call();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AudioProviderProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AudioProviderIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AudioProviderProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_playout_devices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_recording_devices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_playout_device(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_recording_device(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_speech_input_level(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_mic_test(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop_mic_test(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_play_tone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_make_call(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_end_call(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AudioProviderProcessor(boost::shared_ptr<AudioProviderIf> iface) :
    iface_(iface) {
    processMap_["get_playout_devices"] = &AudioProviderProcessor::process_get_playout_devices;
    processMap_["get_recording_devices"] = &AudioProviderProcessor::process_get_recording_devices;
    processMap_["set_playout_device"] = &AudioProviderProcessor::process_set_playout_device;
    processMap_["set_recording_device"] = &AudioProviderProcessor::process_set_recording_device;
    processMap_["get_speech_input_level"] = &AudioProviderProcessor::process_get_speech_input_level;
    processMap_["start_mic_test"] = &AudioProviderProcessor::process_start_mic_test;
    processMap_["stop_mic_test"] = &AudioProviderProcessor::process_stop_mic_test;
    processMap_["play_tone"] = &AudioProviderProcessor::process_play_tone;
    processMap_["make_call"] = &AudioProviderProcessor::process_make_call;
    processMap_["end_call"] = &AudioProviderProcessor::process_end_call;
  }

  virtual ~AudioProviderProcessor() {}
};

class AudioProviderProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AudioProviderProcessorFactory(const ::boost::shared_ptr< AudioProviderIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AudioProviderIfFactory > handlerFactory_;
};

class AudioProviderMultiface : virtual public AudioProviderIf {
 public:
  AudioProviderMultiface(std::vector<boost::shared_ptr<AudioProviderIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AudioProviderMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AudioProviderIf> > ifaces_;
  AudioProviderMultiface() {}
  void add(boost::shared_ptr<AudioProviderIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_playout_devices(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_playout_devices(_return);
    }
    ifaces_[i]->get_playout_devices(_return);
    return;
  }

  void get_recording_devices(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_recording_devices(_return);
    }
    ifaces_[i]->get_recording_devices(_return);
    return;
  }

  void set_playout_device(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_playout_device(name);
    }
    ifaces_[i]->set_playout_device(name);
  }

  void set_recording_device(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_recording_device(name);
    }
    ifaces_[i]->set_recording_device(name);
  }

  int8_t get_speech_input_level() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_speech_input_level();
    }
    return ifaces_[i]->get_speech_input_level();
  }

  void start_mic_test() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_mic_test();
    }
    ifaces_[i]->start_mic_test();
  }

  void stop_mic_test() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop_mic_test();
    }
    ifaces_[i]->stop_mic_test();
  }

  void play_tone() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->play_tone();
    }
    ifaces_[i]->play_tone();
  }

  void make_call(const std::string& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->make_call(address);
    }
    ifaces_[i]->make_call(address);
  }

  void end_call() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->end_call();
    }
    ifaces_[i]->end_call();
  }

};



#endif
